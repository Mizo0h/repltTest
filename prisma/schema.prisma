// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User entity with profile and progress tracking
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  username      String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  avatar        String?
  xp            Int       @default(0)
  level         Int       @default(1)
  streak        Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastPlayed    DateTime?
  
  // Relations
  gameProgress  GameProgress[]
  userAnswers   UserAnswer[]
  accounts      Account[]
  sessions      Session[]
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Game entity representing quiz collections
model Game {
  id          String   @id @default(cuid())
  title       String
  description String?
  level       Int      @default(1)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  questions    Question[]
  gameProgress GameProgress[]
}

// Individual questions within games
model Question {
  id            String   @id @default(cuid())
  gameId        String
  question      String
  options       Json     // Array of 4 options
  correctAnswer Int      // Index of correct option (0-3)
  order         Int      // Question order within game
  
  // Relations
  game         Game          @relation(fields: [gameId], references: [id], onDelete: Cascade)
  userAnswers  UserAnswer[]

  @@index([gameId])
}

// Track user progress in games
model GameProgress {
  id        String   @id @default(cuid())
  userId    String
  gameId    String
  completed Boolean  @default(false)
  score     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([userId, gameId])
  @@index([userId])
  @@index([gameId])
}

// Track user answers to questions
model UserAnswer {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  answer     Int      // Index of selected option (0-3)
  correct    Boolean
  createdAt  DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question  Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([questionId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
} 